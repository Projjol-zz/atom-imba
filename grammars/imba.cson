fileTypes: [
  "imba"
]
name: "Imba"
patterns: [
  {
    name: "comment.block.imba"
    begin: "^[\\t]*###"
    end: "###(?:[ \\t]*\\n)"
    captures:
      "0":
        name: "punctuation.definition.comment.imba"
  }
  {
    name: "comment.line.imba"
    match: "(?:^[ \\t]+)?(#\\s).*$\\n?"
  }
  {
    name: "string.quoted.single.imba"
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.imba"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.imba"
    patterns: []
  }
  {
    name: "string.quoted.double.imba"
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.imba"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.imba"
    patterns: [
      {
        include: "#interpolated_imba"
      }
    ]
  }
  {
    name: "string.regexp.multiline.imba"
    begin: "(\\/{3})"
    beginCaptures:
      "0":
        name: "punctuation.definition.regex.end.imba"
    end: "(\\/{3})([imgy]{0,4})"
    endCaptures:
      "1":
        name: "punctuation.definition.regex.end.imba"
      "2":
        name: "string.regexp.flags.imba"
    patterns: [
      {
        include: "#embedded_comment"
      }
    ]
  }
  {
    name: "string.regexp.simple.imba"
    begin: "(\\/)(?=[^\\t\\n]*\\/)"
    beginCaptures:
      "0":
        name: "punctuation.definition.regex.begin.imba"
    end: "(\\/)([imgy]{0,4})"
    endCaptures:
      "1":
        name: "punctuation.definition.regex.end.imba"
      "2":
        name: "string.regexp.flags.imba"
    patterns: [
      {
        include: "#regex_content"
      }
    ]
  }
  {
    name: "meta.tag.empty.imba"
    match: "(\\<)(\\>)"
    captures:
      "1":
        name: "punctuation.section.tag.open.imba"
      "2":
        name: "punctuation.section.tag.close.imba"
  }
  {
    name: "meta.tag.imba"
    begin: "(\\<)(([a-z\\-]+\\:|\\@|\\.|\\#)?([a-z][a-z\\-\\d]*))"
    beginCaptures:
      "1":
        name: "punctuation.section.tag.open.imba"
      "2":
        name: "entity.name.tag.type.imba"
    end: "(\\>)"
    endCaptures:
      "1":
        name: "punctuation.section.tag.close.imba"
    patterns: [
      {
        include: "#tag_imba"
      }
    ]
  }
  {
    name: "meta.selector.imba.all"
    begin: "(\\$|%)\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.selector.begin.imba"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.selector.end.imba"
    patterns: [
      {
        include: "#selector_content"
      }
    ]
  }
  {
    name: "meta.selector.imba.first"
    begin: "(\\$\\$|%%)\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.selector.begin.imba"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.selector.close.imba"
    patterns: [
      {
        include: "#selector_content"
      }
    ]
  }
  {
    name: "meta.selector.single.imba"
    begin: "(%)(?=[\\w\\.])"
    beginCaptures:
      "0":
        name: "punctuation.definition.selector.begin.imba"
    end: "(?=[\\s\\n\\)\\}\\,])"
    endCaptures:
      "0":
        name: "punctuation.definition.selector.close.imba"
    patterns: [
      {
        include: "#selector_content"
      }
    ]
  }
  {
    name: "meta.selector.id.imba"
    match: "(#[A-Za-z][A-Za-z\\d]*(-[A-Za-z\\d]+)*)"
    captures:
      "0":
        name: "entity.name.tag.html.id.imba"
  }
  {
    name: "meta.class.imba"
    begin: "(\\t*)(local\\s|export\\s|extend\\s)*(class)\\s+(([A-Z]\\w*\\.)*([A-Z]\\w*))(\\s*(<)\\s*(([A-Z]\\w*\\.)*([A-Z]\\w*)))?"
    beginCaptures:
      "2":
        name: "keyword.control.access.imba"
      "3":
        name: "keyword.control.class.imba"
      "4":
        name: "entity.name.type.class.imba"
      "5":
        name: "entity.name.type.class.namespace.imba"
      "6":
        name: "entity.name.type.class.name.imba"
      "7":
        name: "meta.class.inheritance.imba"
      "8":
        name: "keyword.control.extends.imba"
      "9":
        name: "entity.other.inherited.class.imba"
      "10":
        name: "entity.other.inherited.class.namespace.imba"
      "11":
        name: "entity.other.inherited.class.name.imba"
    end: "^(?!(\\1\\t+|\\t*$))"
    contentName: "meta.class.body.imba"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    name: "meta.tagdef.imba"
    match: "\\s*(tag)\\s+([a-z\\-]+:)?(\\#?[a-z\\-]+)(\\s*(<)\\s*(\\#?[a-z][a-z0-9_:\\-]*))?"
    captures:
      "1":
        name: "keyword.control.class.imba"
      "2":
        name: "entity.name.type.tag.namespace.imba"
      "3":
        name: "entity.name.type.tag.name.imba"
      "5":
        name: "keyword.control.extends.imba"
      "6":
        name: "entity.other.superclass.imba"
  }
  {
    name: "meta.property.imba"
    match: "\\s*(property|prop) (([a-z\\_][\\w\\_]*)(\\-[\\d\\w\\_]+)*)?"
    captures:
      "1":
        name: "keyword.control.property.imba"
      "2":
        name: "entity.name.property.imba"
  }
  {
    name: "meta.function.method.imba"
    begin: "^(\\t*)(local\\s|export\\s|global\\s)*(def)\\s(([A-Za-z][A-Za-z0-9_]*[\\.\\#])?([A-Za-z\\_][A-Za-z0-9_\\-]*[\\=\\?\\!]?))(?=([\\s\\t]|$))"
    beginCaptures:
      "0":
        name: "keyword.control.access.imba"
      "1":
        name: "meta.function.method.declaration.imba"
      "3":
        name: "keyword.control.def.imba"
      "4":
        name: "entity.name.function.imba"
      "5":
        name: "meta.function.owner.imba"
    end: "($|\\b(do)\\b)"
    endCaptures:
      "2":
        name: "keyword.control.def.block.imba"
    contentName: "variable.parameter.function.imba"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    name: "keyword.other.special.method.imba"
    match: "\\b(initialize|new|include|extend|raise|attr_reader|attr_writer|attr_accessor|attr|private|module_function|public|protected|prop|property)\\b"
  }
  {
    name: "support.function.imba"
    match: "\\b(log|setInterval|setTimeout)\\b"
  }
  {
    name: "accessor.ivar.imba"
    match: "(\\.)@[A-Z\\_a-z\\d][\\w\\_\\d]*(\\-[A-Z\\_a-z\\d]+)*"
    captures:
      "0":
        name: "variable.instance.imba"
      "1":
        name: "punctuation.access.ivar.imba"
  }
  {
    name: "accessor.method.special.imba"
    match: "(\\.)(new|include|extend)"
    captures:
      "0":
        name: "identifier.method.imba"
      "1":
        name: "punctuation.access.method.imba"
      "2":
        name: "keyword.other.special.method.imba"
  }
  {
    name: "accessor.method.regular.imba"
    match: "(\\.)[a-z\\_][\\w\\_]*(\\-[A-Z\\_a-z\\d]+)*"
    captures:
      "0":
        name: "identifier.method.imba"
      "1":
        name: "punctuation.access.method.imba"
  }
  {
    name: "accessor.class.imba"
    match: "(\\.)[A-Z\\_]+([A-Za-z\\d]+)*"
    captures:
      "0":
        name: "identifier.class.imba"
      "1":
        name: "punctuation.access.class.imba"
  }
  {
    name: "meta.function.block.params.imba"
    begin: "\\b(do)\\s*(\\|)"
    beginCaptures:
      "1":
        name: "keyword.control.block.imba"
      "2":
        name: "variable.parameter.function.imba"
    end: "(\\|)"
    endCaptures:
      "1":
        name: "variable.parameter.function.imba"
    contentName: "variable.parameter.function.imba"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    name: "meta.function.block.paramless.imba"
    match: "\\b(do)\\b"
    captures:
      "1":
        name: "keyword.control.block.imba"
  }
  {
    name: "variable.instance.imba"
    match: "@[A-Z\\_a-z\\d]+(\\-[A-Z\\_a-z\\d]+)*"
  }
  {
    name: "variable.language.scope.self.imba"
    match: "self"
  }
  {
    name: "variable.language.scope.this.imba"
    match: "this"
  }
  {
    name: "keyword.control.imba"
    match: "(begin|continue|class|tag|if|else|elif|for|own|of|in|isa|instanceof|typeof|module|then|unless|until|switch|try|finally|catch|when|while|loop|break|return|throw|await|extern|delete)\\b"
  }
  {
    name: "keyword.special.imba"
    match: "\\b(require|global|super|export|import)\\b"
  }
  {
    name: "keyword.control.var.imba"
    match: "\\b(var|let)\\b"
  }
  {
    name: "constant.numeric.float.imba"
    match: "\\d+\\.\\d+"
  }
  {
    name: "constant.numeric.integer.imba"
    match: "(\\b[0-9]+)"
  }
  {
    name: "constant.language.boolean.imba"
    match: "\\b(yes|no|true|false)\\b"
  }
  {
    name: "constant.language.other.imba"
    match: "\\b(undefined|null|nil)\\b"
  }
  {
    name: "constant.language.math.imba"
    match: "π"
  }
  {
    name: "identifier.key.imba"
    match: "[\\w\\_]+(\\-[\\w\\d\\_]+)*[\\?\\!]?\\:(\\s|\\[|$)"
  }
  {
    name: "identifier.const.imba"
    match: "\\b([A-Z\\_]+)\\b"
  }
  {
    name: "identifier.class.imba"
    match: "[A-Z]+([A-Za-z\\d]+)?"
  }
  {
    name: "identifier.symbol.imba"
    match: "\\:[\\w\\d\\_]+(\\-[\\w\\d\\_]+)*[\\?\\!\\=]?"
  }
  {
    name: "identifier.basic.imba"
    match: "[a-z_A-Z][\\_\\w\\d]*(\\-[_\\d\\w]+)?"
  }
  {
    name: "keyword.operator.comparison.imba"
    match: "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=| is | isnt | not |===|==|\\?=|=~|!=|!~\\?|≤|≥|≡|≈"
  }
  {
    name: "keyword.operator.logical.imba"
    match: "\\bnot\\b|&&| and |\\|\\|| or | in |\\^|\\s:\\\\s|\\?\\|{1,2}|\\?\\&{1,2}|[\\?\\&]\\>|∩|∪|∈|∉|∋|∌"
  }
  {
    name: "keyword.operator.arithmetic.imba"
    match: "(%|&|\\*\\*|\\*|\\+|\\-|\\/|×|÷|√)"
  }
  {
    name: "keyword.operator.assignment.imba"
    match: "\\=|\\?\\=|\\&\\&?\\="
  }
  {
    name: "punctuation.section.scope.imba"
    match: "\\{|\\}"
  }
  {
    name: "punctuation.section.array.imba"
    match: "\\[|\\]"
  }
  {
    name: "punctuation.section.function.imba"
    match: "\\(|\\)"
  }
  {
    name: "meta.indent.imba"
    match: "^(\\t+)"
  }
  {
    name: "meta.invalid.indent.imba"
    match: "^([ ]+)"
  }
]
repository:
  interpolated_imba:
    patterns: [
      {
        name: "source.imba.embedded.source"
        begin: "\\{"
        end: "\\}"
        captures:
          "0":
            name: "punctuation.section.embedded.imba"
        patterns: [
          {
            include: "#nest_curly_and_self"
          }
          {
            include: "$self"
          }
        ]
      }
    ]
  nest_curly:
    patterns: [
      {
        begin: "\\{"
        end: "\\}"
        captures:
          "0":
            name: "punctuation.section.scope.imba"
        patterns: [
          {
            include: "#nest_curly"
          }
        ]
      }
    ]
  nest_curly_and_self:
    patterns: [
      {
        begin: "\\{"
        end: "\\}"
        captures:
          "0":
            name: "punctuation.section.scope.imba"
        patterns: [
          {
            include: "#nest_curly_and_self"
          }
        ]
      }
      {
        include: "$self"
      }
    ]
  embedded_comment:
    patterns: [
      {
        name: "comment.line.imba"
        match: "(#)\\s+(.*)$\\n?"
        captures:
          "1":
            name: "punctuation.definition.comment.imba"
      }
    ]
  regex_content:
    patterns: [
      {
        name: "string.regex.group.imba"
        match: "GROUP"
      }
      {
        name: "string.regex.escaped.imba"
        match: "\\\\([0-7]{1,3}|x[\\da-fA-F]{1,2}|\\/|.)"
      }
    ]
  selector_content:
    patterns: [
      {
        name: "meta.selector.class.imba"
        match: "\\.[A-Za-z_\\-][\\w_\\-\\d]*\\b"
      }
    ]
  escaped_char:
    patterns: [
      {
        name: "constant.character.escape.imba"
        match: "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)"
      }
    ]
  tag_imba:
    patterns: [
      {
        name: "entity.name.tag.class.evaled.imba"
        begin: "\\.\\{"
        end: "\\}"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        name: "entity.name.tag.id.evaled.imba"
        begin: "#\\{"
        end: "\\}"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        name: "entity.name.tag.object.imba"
        begin: "\\["
        end: "\\]"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        name: "entity.name.tag.id.imba"
        match: "#[a-z]*"
      }
      {
        name: "entity.name.tag.class.imba"
        match: "\\.[A-Za-z\\-\\_\\d]*"
      }
      {
        name: "entity.name.tag.ref.imba"
        match: "\\@[A-Za-z\\-\\_\\d]*"
      }
      {
        name: "entity.name.tag.attribute.imba"
        begin: "[a-z]+(\\:[a-z]+)?\\s*\\="
        end: "((?=([\\w\\-\\_\\:]+)\\s*\\=)|(?=>))"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
scopeName: "source.imba"
